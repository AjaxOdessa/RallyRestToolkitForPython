
/Users/lehki03/projects/RallyRestToolkitForPython has the current dev state as branch labeled 'hacktonia' .
     the above has .git/config whose remote "origin" goes to RallySoftware/RallyTools/RallyRestToolkitForPython
     which is the repo where things get officially released as long as I have a klehman-rally Github account.

/Users/lehki03/dev/github/pyral is where dev should be done, but that didn't happen in 1.5.0 dev cycle.
      the above has .git/config whose remote "origin" goes to klehman-rally/pyral repo (I call this mine...)
      usually what happens is that I do my own PR in this repo, then I PR in the RallySoftware Github org
      to get into master the elements that are ready for release.

have to set these things in your environment
   to be able to run tests

    working directory /Users/lehki03/projects/RallyRestToolkitForPython

   use pyenv, get 3.6.11 installed and use that as your baseline (follow on with 3.7 and/or 3.8 later)

   # set up for use of pyenv
   eval "$(pyenv init -)"

   pyenv shell 3.6.11


   set these env vars:
      PYTHON=python3.6
      export PYTHONPATH=".:/Users/lehki03/python:/Users/lehki03/projects/RallyRestToolkitForPython"
      PYTEST=/Users/lehki03/.pyenv/versions/3.6.11/lib/python3.6/site-packages/pytest.py


################################################################################################

while addressing Issue #157 opened on Aug 28, 2019 by Kimudai94
    ----  rally.get() returns wrong results for a query with char "&"

in the 1.4.2 code
   when you setProject to a name containing a '&' char the url is

   'https://rally1.rallydev.com/slm/webservice/v2.0/PortfolioItem/Feature?fetch=Name,FormattedID&workspace=workspace/41529001&project=project/334329159&projectScopeUp=false&projectScopeDown=false&pagesize=500&start=1'

   when you include the Project.Name in the criteria and the name has a '&' char in it...

   'https://rally1.rallydev.com/slm/webservice/v2.0/PortfolioItem/Feature?fetch=Name,FormattedID&query=(Project.Name%20%3D%20%22R%2526D%22)&workspace=workspace/41529001&project=project/334329159&projectScopeUp=false&projectScopeDown=false&pagesize=500&start=1'

  the url quoting encodes the '%26' as '%2526' (as the original '&' char was forced to '%26' by the query builder code). 
  The string of '%2526' is incorrect and the Rally WSAPI machinery isn't likely to evaluate per the user intent

I commented the line in query_builder.py (line #195) that replaced the '&' char with '%26' in the criteria string.


################################################################################################

Release Notes for 1.5.0

    De-branded from 'CA Agile Central' to Rally again!
    Several defects related to custom PortfolioItem sub-types have been fixed.  
      Now when creating or updating a custom PortfolioItem sub-type the 
      return value will be a valid pyral instance for the sub-type.
    Fixed defect related to broken capability to retrieve attachments.
    Fixed defect related to inability to add a feature to a collection.
    Ability to ping Rally server before attempting connection has been dropped.
      Many sys admin and network admins have disabled the ping protocol for security concerns
    Minor documentation fixes about item attribute navigation and adding to collections.



Hackathon preso

      Slide #1:  Borrow from April hackathon and update

      Slide #2:  Get an image of a lava flow (see if you can add text on top 'pyral is on fire!'

                 o talking point (pyral has 105 customers using it and is the highest volume integration)
                        has been the most used integration by volume since 2015
                        hasn't had more than 2 days of attention since 2017
      Slide #3
               Take a screenshot of current-issues (above the cut-line)
                 o talking point 
                      Several issues were defects around dealing with custom PortfolioItem sub-types
                      Two issues were related to query criteria and result handling
                      Some adjustments to documentation to clarify proper use.
                      Research into other issues deemed low priority or "never fix" (On-Prem).

      Slide #4  Peaceful meadow shot
                  pyral 1.5.0 is ready for release!


     --- slide 1

    Hi, I'm Kip Lehman and this is my winter 2021 Hackathon read-out.

    For my first hackathon over 10 years ago I developed a Python 
    interface to Rally via the WSAPI.


     --- slide 2 polar regions

    I called it 'pyral' in the whimsical hope that an easy to use Pythonic means
    of accessing the Rally WSAPI would go viral (or at least be useful to 
    some external customers).
   
    The first hackathon was essentially proof of concept but 2 more 
    hackathons got it to a place where it was released for availability 
    for use by anyone with a Rally subscription.

    --- slide 3  pyral is hot!

    Since then, the usage has grown steadily.  Somewhat surprisingly, in terms
    terms of WSAPI request volume, this package is the most used integration 
    element that we track from the WSAPI request headers (via Splunk). 
    As of last October, there were 105 unique subscriptions using this package.

    The last major work on pyral was done nearly 4 years ago and since then the
    package has had less than 2 days with any attention besides reading emails with
    feature requests and issues that were posted in in the Gitub repo for this package.

    --- slide 3  working issues list

    For this hackathon, I wanted to assess the issues that have been 
    added in Github by the user community and address the ones that had 
    the most potential impact.

    I triaged the list of issues across the dimensions of issue type (Bug, Feature, 
    question, etc.) and impact/severity and whether or not I could reproduce the 
    reported behavior.
        
    I ended up with a list of around 20 issues, prioritized them  and set to work 
    repro'ing and fixing/implementing the top half of those.  

    The items on the bottom half were requests that had low impact.  There were some 
    related to use in an On-Prem environment, some were questions for behavior that the
    WSAPI either doesn't support any more or never did and there were a couple 
    asking for behavior that was dysfunctional.

    The major item was figuring out a way to define and use classes related to custom 
    PortfolioItem sub-types.  This consumed an inordinate amount of time but I ended 
    up with an approach that was workable, fairly compact, supportable and very 
    localized in the code.

    I updated the development environment to use a more recent version of Python 
    (3.7, which is still a couple of minor releases behind the current release).

    There were only minor issues in getting the test suite to pass with the 
    modifications that were done.

    ---- slide 4

    I was very happy to update the code and docs to de-brand from 'CA Agile Central' 
    back to Rally!  I'm ready to publish the 1.5.0 release later this week. 

    Thanks for listening.

