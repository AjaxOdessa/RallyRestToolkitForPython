Building the release locally
----------------------------

Use the upver.py script to update the version number to 1.5.1 in the relevant files.
Run a grep -R 1.5.0 . to see if there are any remnants of the previous version in any file.
Reconcile the result against the desired outcome.
  The files affected by upver.py include (this is an incomplete list):
     LICENSE, PKG-INFO, README.rst, README.short, the pyral/*.py files, doc/source/conf.py, build_dist.py, setup.py

Before generating the documentation, you have to get an environment setup that will support that.
The doc files are in RestructuredText  format (.rst) and Sphinx is used to generate the HMTL 
renderings.
   The make html uses Sphinx (1.4.8) to generate the html docs.

   Installing that specific version of Sphinx (which is circa 2016) 
     also installed the following:
        alabaster-0.7.12 
        babel-2.9.0 
        Pygments-2.7.4
        imagesize-1.2.0 
        snowballstemmer-2.1.0 
        pytz-2021.1 

   I also had to specifically install sphinx-rtd-theme (Sphinx for Read The Docs presentation/styling)
      via pip3 install sphinx-rtd-theme==0.2.4  (that version is chronologically in the same timeframe as Sphinx 1.4.8)
  

cd into the doc subdirectory and run:
   make clean
   make html

   You can use any of Python vers installed 3.7, 3.8, 3.9 as long as Sphinx has been
   installed for the specific Python version:

Modify the build_dist.py script to include/exclude elements as needed.

Update the MANIFEST.in file (which is used to generate the MANIFEST file).
Make sure that there aren't going to be any files containing any kind of actual Agile Central credentials.
   (For testing, in the test subdir are files named rally_targets*.py.  At this point none of those
   should be commited/pushed or included in the source distribution.

Then you can run
   py build_dist.py

This will result in the construction of the pyral-x.y.z.tar.gz and pyral-x.y.z.zip files
in the base directory. The pyral-1.5.1.tar.gz file gets copied to both the dist and dists
subdirs. The pyral-1.5.1.zip file gets copied to the dists subdir.

build_dist.py also produces a "wheel" file named  'pyral-1.5.1-py2.py3-none-none.whl'
which gets moved to the dist subdir.
Additionally, a docs zip file (pyral-1.5.1.docs.html.zip) gets constructed and deposited
into the dist subdir.  The zip file gets built from the doc/build/html directory.
Those newly copied files in the dist and dists subdirs should then be committed, but not
 the ones in the base directory.

Take each of the generated distributions (tar.gz and zip) and copy them to another location
outside of the pyral code root.  Unpack them and do a sanity check on the contents.
    Confirm that the pyral subdirectory has only the elements needed.
    Confirm that the examples subdirectory has all the examples scripts intended
    Confirm that there is a doc subdir with a populated build/html directory
    Confirm that there is no test subdirectory in the distribution

Making the release available to others
--------------------------------------

GitHub
......
   push the release branch to klehman-rally/pyral
   after merging the release branch to master on GitHub and switching to master branch locally
   $ git checkout master
   $ git fetch
   $ git pull origin master
   $ git tag x.y.z  # to tag the latest commit with your semantic release identifier
   $ git push origin x.y.z # to get the tag back up to your primary GitHub repo

   Situate in GitHub in the RallyTools/RallyRestToolkitForPython repository
   Do a pull request in the master branch there to pull in the master branch of klehman-rally/pyral 
   merge the branch in to RallyTools/RallyRestToolkitForPython master

   ********************************************************************************
   Make sure that the package on GitHub under dists has the correct items included
   ********************************************************************************


Publishing on PyPI    
..................

Using python setup.py register and twine makes this process less painful than
prior to 2017.  The reason the following instructions exists is that the "standard"
technique results in uploading a pyral-x.y.z.tar.gz that does NOT have all the
elements in it that I want. So, the instructions below insure that the tar.gz package
has all the things I want (and only those things) included in the tar ball.

I created an account on test.pypi.org.  This is a "practice" location for packages that I
want to upload (in this case pyral).

Using Python 3.5 (via pyenv circa spring 2017) in which there is a reasonably current
version of setuptools and twine, enables registering the pyral package and uploading
the goods with an opportunity to confirm the "checkpoints" along the way.
   **** Don't use py setup.py sdist upload ****
Using twine will let me use my build_dist.py to build the distributable package and
put it in the dist subdirectory and then `twine upload` will
get it to one of the PyPI locations.

Put a copy of the pyral-1.5.1.tar.gz into the dist subdir, this is where twine expects it to be.
Also, in there is the wheel file which is a zip file with the pyral package and some package 
metainfo in a pyral-1.5.1.dist-info subdir in the zip package.  The naming convention for
the file indicates that it is both Python 2 and Python 3 compatible, that there are no compiled
extensions or elements and that it can run on any platform (ie, it is a pure Python package)

Locally, run: py setup.py check and py setup.py check --restructuredtext
  so that you can see if there are any problems with the README.rst file.
Look at the return code being 0 to denote "goodness"  # echo $?

**** NOTE: As of late July 2017, the registration step of publishing on PyPI has been disabled !!  ***
****       Also uploading to test.pypi.org is non-functional!                                      ***
****       More also... The README.rst doesn't get used in the PyPI page for your package!!        ***

Uploading your package to PyPI
------------------------------

  You must be using twine 1.8.x or better

  run:
     twine upload  dist/pyral-1.5.1.tar.gz dist/pyral-1.5.1-*.whl

-------------------------------------------------
Making the documentation available on popular free Python related website

  http://readthedocs.org  is the place where the current dabblers of Python Packaging activities
  recommend that the documents be published.
 
  I have an account on readthedocs.org  (klehman) hint: north country demi-*  
  On readthedocs.org, the pyral package is registered and linked to 
  github.com/RallyTools/RallyRestAPIToolkitforPython.  
  However, the site is not smart enough detect when there has been a commit on the master
  branch so you have to trigger the build manually from readthedocs.org package admin page.

Following is obsolete...
************************
*
* Updating the http://pythonhosted.org/pyral documentation
* 
*   according to the blurb on the pypi admin page for pyral 
* 
*      "You can now host documentation at http://pythonhosted.org/pyral. 
*        To upload documentation, prepare a .zip file that is unpacked into this URL. 
*        Only static pages are supported. The zip file must have a top-level "index.html". "
* 
*   The build_dist.py (run earlier) includes a step that puts the generated documentation
*    into a zip file in the dist subdir. The file is named: pyral-1.5.1.docs.html.zip.
* 
*   Then on the pypi pyral admin page, Choose the zip file (in the dist subdir) and upload it.
*   If successful, you'll see your browser page transition to the pyral doc overview page.
*    
*    apparently the docs get taken from the Github site (klehman-rally/pyral)
* 
